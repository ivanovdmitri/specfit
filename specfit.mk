SHELL    =/bin/bash

# includes
SPECFITINCDIR=$(SPECFIT)/inc
# source files
SPECFITSRCDIR=$(SPECFIT)/src
# library files
SPECFITLIBDIR=$(SPECFIT)/lib
# temporary and autogenerated files
SPECFITTMPDIR=$(SPECFIT)/tmp


# creating the temporary directory if it doesn't exist
$(if $(shell mkdir -p $(SPECFITTMPDIR) && test -d $(SPECFITTMPDIR) || echo "failed"),\
        $(error failed to create the directory $(SPECFITTMPDIR)),)

# set up the ROOT compiler flags and 
ROOTCFLAGS   := $(shell root-config --cflags)

# may require additional include directories to compile hadd
$(if $(wildcard $(ROOTSYS)/ginclude),\
	$(eval ROOTCFLAGS += -I$(ROOTSYS)/ginclude),)

ROOTLIBS     := $(shell root-config --libs) -lMinuit
# ROOT integer version ID
ROOT_INT_VERSION_ID=$(shell $(ROOTSYS)/bin/root-config --version | sed 's/[\.,\/]//g')
# rootcint flags depending on the version
ROOTCINTFLAGS := -c -p # ROOT versions older than 6.20/00
# ROOT versions later than 6.20/00 don't require these flags
ifeq ($(shell test $(ROOT_INT_VERSION_ID) -ge 62000; echo $$?),0)
ROOTCINTFLAGS :=
endif


# set up the other compiler flags
CPP           = g++
CPPFLAGS      = $(ROOTCFLAGS) $(OPTOPT) -Wall -Wextra -fPIC
CC            = gcc
CFLAGS        = $(OPTOPT) -Wextra -fPIC
LD            = g++
LDFLAGS       = $(OPTOPT)
AR            = ar
OBJ           = .o
SO            = .so
EXE           = .run


# additional include directory
INCS = -I$(SPECFITINCDIR)


# shared library file construction
# the shared library itself that can be loaded from ROOT
specfit_so              = $(SPECFITLIBDIR)/libspecfit$(SO)
# shared library include files: only specfit.h and specfitLinkDef.h are needed
# because specfit.h includes all other useful include files and specfitLinkDef tells
# what objects to link
specfit_so_header_list  = specfit specfitLinkDef
# list of all shared library sources (without suffixes)
specfit_so_source_list  = TCRFlux TCRFluxFit TSPECFITF1 TBPLF1 specfit_uti specfit_canv
# construction of headers with full paths
specfit_so_headers      = $(addsuffix .h, $(addprefix $(SPECFITINCDIR)/, $(specfit_so_header_list)))
# construction of all object files with full paths
specfit_so_objects      = $(addsuffix $(OBJ), $(addprefix $(SPECFITSRCDIR)/, $(specfit_so_source_list)))
specfit_so_objects     += $(SPECFITTMPDIR)/libspecfitDict$(OBJ)


htmldoc=$(SPECFIT)/htmldoc

#################### TARGETS ###################
.PHONY: all htmldoc clean cleanall
all: $(specfit_so)
htmldoc: $(htmldoc)

$(specfit_so): $(specfit_so_objects); \
$(CPP) $(OPTOPT) -shared $^ $(ROOTLIBS) -o $@; \
find $(SPECFITTMPDIR) -name "*.pcm" -exec cp {} $(SPECFITLIBDIR)/. \;

$(htmldoc): $(SPECFIT)/generate_specfit_htmldoc.C $(specfit_so) ; \
root -l -b -q $(SPECFIT) $(<F) >& /dev/null

# dictionary generation
$(SPECFITTMPDIR)/libspecfitDict.cxx: $(specfit_so_headers) ; \
rootcint -f $@ $(ROOTCINTFLAGS) $(INCS) $(<F) $(filter %LinkDef.h, $^)

# take care of the header dependencies
$(filter-out %Dict$(OBJ), $(specfit_so_objects)) : $(SPECFITSRCDIR)/%$(OBJ) : $(SPECFITINCDIR)/%.h $(SPECFITINCDIR)/specfit.h

clean: ; \
rm -rf $(SPECFITSRCDIR)/*$(OBJ) $(SPECFITSRCDIR)/*~ $(SPECFITINCDIR)/*~ $(SPECFITTMPDIR) ; \
rm -rf $(SPECFIT)/__pycache__ $(SPECFIT)/*.pyc

cleanall: clean ; \
rm -rf $(specfit_so) $(htmldoc) $(specfit_bins) $(SPECFITLIBDIR)/*.pcm

# suffix rules that result in compilation
%$(OBJ) : %.cpp ; \
$(CPP) $(CPPFLAGS) $(INCS) -o $@ $< -c

%$(OBJ) : %.cxx ; \
$(CPP) $(CPPFLAGS) $(INCS) -o $@ $< -c

%$(OBJ) : %.c ; \
$(CC) $(CFLAGS) $(INCS) -o $@ $< -c

